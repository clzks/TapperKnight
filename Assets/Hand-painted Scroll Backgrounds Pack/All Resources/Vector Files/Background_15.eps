%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 15.1.0
%%For: (Oceloti) ()
%%Title: (Nature_Game_Background_Landscape_01.eps)
%%CreationDate: 2/9/2015 2:28 PM
%%Canvassize: 16383
%%BoundingBox: 2250 -2401 2750 -2150
%%HiResBoundingBox: 2250 -2400.8848 2750 -2150.8848
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%RGBProcessColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 2500.5 -2276.3848 2500.5 -2276.3848
%AI3_TileBox: 2079.1299 -2573.4844 2920.9902 -1978.4648
%AI3_DocumentPreview: Header
%AI5_ArtSize: 500 250
%AI5_RulerUnits: 6
%AI5_ArtFlags: 0 0 0 1 0 0 0 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 3
%AI8_OpenToView: 1821 -1806 1 1359 920 18 0 0 316 117 0 0
%AI5_OpenViewLayers: 777
%%PageOrigin:2100 -2800
%AI7_GridSettings: 10 10 10 10 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 64 8
%%BeginData: 17131 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD80CFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACF
%A7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CF
%CACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACF
%A7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CF
%CACFA7CFCACFA7CFCACFA7CFCACFCFCACFCFCFCACFCFCFCACFCFCFCACFCF
%CFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCA
%CFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCF
%CFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCA
%CFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFA7CFA7CFA7CFA7CF
%A7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CF
%A7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CF
%A7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CF
%A7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7FD
%81CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CF
%CACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACF
%A7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CF
%CACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACF
%A7CFCACFA7CFCACFA7FD04CFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACF
%CFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCF
%CACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACF
%CFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCF
%CACFCFCFCACFCFCFCACFCFCFCACFCFCFCAA7CFA7CFA7CFA7CFA7CFA7CFA7
%CFA7CFA7CFA8CFA7CFA8CFA7CFA8CFA7CFA8CFA7CFA8CFA7CFA8CFA7CFA7
%CFA7CFA7CFA7CFA8CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7
%CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7
%CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7FD11CFFFCFFF
%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFF
%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFCFCFFFFD33
%CFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA8FFCFCFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFCFCAFFCFFFCAFFCFCFCAFFCFCFA7CFCACFA7CFCACFA7CFCA
%CFA7CFCACFA7CFCACFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCF
%CAFD04CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCF
%FFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCF
%FFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFCFCACFCFCFCACFCF
%CFCACFCFCFCACFCFCFCACFCFCFCACFCFA7CFA7CFA7CFA7CFA7CFA7CFA7CF
%A7CFA7CFA7CFA7CFA7CFA7CFA7CFA8CFA8CFCACFA8FFCFFFA8FFCACFA8FF
%CACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCAFF
%A8FFCFFFA8FFCACFA8FFCACFA8CFCACFA8CFA8CFA8CFA8CFA7CFA7CFA7CF
%A7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7FD1ECFCAFD08CF
%FFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCF
%FFCFFFCFFFCFFFCFFFCFFFFD0ECFCAFD22CFCACFA7CFCACFA7CFCACFA7CF
%CACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACF
%A7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA7CF
%CACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACF
%A7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7FD04CFCACF
%CFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCF
%CACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACF
%CFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCF
%CACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACF
%CFCFCAA8CFA8CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7
%CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7
%CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7
%CFA7CFA7CFA7CFA7CFA7CFA8CFA8CFCACFA8FFCACFA8FFCACFA8FFCACFA8
%FFCACFA8FFCACFA8CFCACFFFCFFFCFFFCFFFCFFFFD0ECFCACFCFCFCACFCF
%CFCACFCFCFCACFCFCFCAFD33CFCAFD04CFFFCFFFCFFFCFFFCFFFCFFFCFFF
%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFCAFFCFFFCAFFCFFFCAFFCF
%CFCAFFCFCFA8FFCFCFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8
%CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCA
%CFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA8CFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFFFCFFF
%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFF
%CFFFCFFFCFFFCFFFFD04CFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCF
%CFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFFFCFFFCFFFCF
%FFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCF
%FFCFFFCFCACFA8CFCACFA8FFCAFFA8FFCACFA8FFCACFA8FFCACFA8FFCACF
%A8FFCACFA8FFCACFA8FFCAFFA8FFCACFA7CFA7CFA7CFA8CFA7CFA8CFA8CF
%A8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFCACFA8CFCACFA8FFCACF
%A8FFCFFFA8FFCACFA8FFCFFFA8FFCACFA8FFCACFA8FFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCFCAFD08CFFFCFFFCFFFCFFFCFFFCFFFCFFF
%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFCFCAFD06CFFFCFFFCFFFCFFFCF
%FFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCF
%FFCFFFCFFFCFFFCFFFCFFFCFFFFD12CFCACFCFCFCACFCFCFCACFCFCACFA7
%CFCACFA7CFCACFA7CFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%CFA8CFCACFA7CFCACFA7CFCACFA7CFCACFA8CFCFCFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFCFA8CFCA
%CFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7
%CFCACFA7FD04CFCACFCFCFCAFD04CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFF
%CFFFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCAFF
%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFF
%CFFFCFFFCFFFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACF
%CFCFCACFCFCFCACFCFCFCAA7CFA7CFA7CFA7CFA7CFCAFFA8FFCACFA8FFCF
%CFA8FFCACFA8CFA8CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7
%CFA7CFA7CFA7CFA7CFA7CFA8CFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCA
%CFA8FFCACFA8FFCACFA8FFCAFFA8FFCACFA8FFCACFA8CFCACFA8CFA8CFA7
%CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7FD09CFFFCFFFCFFFCFFFCFFF
%FD06CFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCF
%CFCAFD0CCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFF
%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFFD0ECFCAA8CF
%CACFA8FFCFFFCAFFCFCFA8CFCACFA7CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8FFCFCFA8FF
%CFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFF
%CAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFCFA8CFCACFA7CF
%CACFA7CFCACFFFCFFFCFFFCFFFCFFFFD04CFCACFCFCFCAFFCFFFCFFFCFFF
%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFF
%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFF
%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFF
%CFFFCFFFCFFFCFFFCFFFCFFFCFCACFA8FFCFCFA8CFA8CFA7CFA7CFA7CFA7
%CFA7CFA8CFA8CFCACFA8FFCACFA8FFCACFA8FFCFFFA8FFCFFFA8FFCFFFA8
%FFCFFFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCA
%CFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8
%FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFFFCFFFFD12CFCAFD0C
%CFFFCFCFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFF
%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFF
%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFF
%CFFFCFFFCFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCA
%CFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA8
%CFCACFA8FFCFCFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFCFCAFFCFCFA8
%CFCACFA8CFCACFA8CFCACFA8FD04CFCACFCFCFCACFCFCFCACFCFCFCACFCF
%CFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCA
%CFCFCFCACFCFCFCACFCFCFCAFD04CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFF
%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFCFCFFFFD06CFCACFCFCFCA
%CFCFCFCACFCFCFCACFCFCFCACFCFCFCAA7CFA7CFA7CFA7CFA7CFA7CFA7CF
%A7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA8CFA7CFA8CFA8CFA8CF
%A8CFA8CFA8CFA8CFA7CFA8CFA7CFA8CFA7CFA7CFA7CFCACFA8FFCACFA8FF
%CACFA8FFCACFA8CFCACFA8CFA8CFA8CFA8CFA7CFA8CFA7CFA7CFA7CFA7CF
%A7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7FD14CFCAFD0CCF
%FFCFFFCFFFCFFFCACFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCF
%FFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFCFCFFFFD2FCFA7CFCACFA7CFCACF
%A7CFCACFA7CFCACFA8CFCACFA8CFCACFCAFFCFCFCAFFCFFFCAFFCFFFCFFF
%A7A7A7CAA8CFA8FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFF
%CAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFA8CFCACFA7CFCACFA7CF
%CACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACFA7CFCACF
%CFCACFCFCFCACFCFCFCACFCFFFCFFFCFFFCFFFCFFFCFFFCFCFCFFFCFFFCF
%FFCFFFCFFFCFCFA7CFA7CFA7CFA7CAA7CFCFFFCFFFCFFFCFFFCFFFCFFFCF
%FFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFFD06CFCACFCFCF
%CACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACFCFCFCACF
%CFCFCACFCFA8CFA7CFA7CFA7CFA7CFA7CFA8CFA8CFCACFA8CFCACFA8C9A7
%CFA8CFA7A7A7CFCAFFA8CFA7A7A7CAA7A7A7C9A7A7A7CAA7CFA8FFCFFFA8
%FFCFFFA8FFCACFA8FFCAFFA8FFCFFFA8FFCACFA8CFCACFA8CFA8CFA7CFA7
%CFA7CFA7CFA7CFA8CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA8CFA7
%CFA7CFA7CFA7CFA7CFA7CFA7CFCFA7FD0FCFCACFCFCFCACFA7CFA7CFA7CF
%A7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFCACFCFFFCFFFCFFF
%CFFFCFFFCFFFCFFFCFFFCFFFCFCFCACFA7CFCAFD0FCFCACFA7CFA7FD0FCF
%A7CFA7CEA7CFA7CFA6CFA7CFA7CFFD04A7CAA7CFA7CFCACFA7CAA7CFA8CF
%CACFA7CFA8C9A7CAA7A7A7CAA7A7A7CAA7A7A7CAA7A7A7CAA7A7A7CAA7A7
%A7CAA7A7A7C9A7CAA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7A7A7CA
%A7A7A7CFA7CFA7CFA7CFA7CFA7CEA7CFA7A7A7CAA7A7A7CFCACFA7CFCACF
%A8CFCACFA8C9FD07A7CAA7A77BC9A7A7A7CACFA7C9A7CFA7C9A7CFA7CAA7
%CFA7CFCACFCFCFA8CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7
%CFA7CFA7CFA7CFA7CFA7CFA7CAA7CFA7CFA7CFA7CAA7CFA7CAA7CFA7CAA7
%CEA7CFA7CFA7C9A7CFA7CFA7CFA7CFA7CFA7C9A7CEA6C9A7CFA7CFA7CFA8
%CFA8CFCACFA8CFCACFA7A7A6A7A6C9A7CFA7A7A6A69FC9A7CFA77BA57BA5
%7BA59FA59FA6A5A6A5FD04A6A7A6A7A7C9A7A7A7CAA7A8A7CAA7A7A7CAA7
%A7A7CAA7A7A7CAA7A7A7CAA7A7A7CAA7A7A7CAA7A7A7CAA7A7A7CAA7A7A7
%CAA7A7A7CAA7A7A6C9A6A7A6A6A7A8A7CAA7A7A7CAFD04A7FD04A6A5A7A6
%C9A6A7A6A7FD0AA69FA59FA59FA6A5A67BA59FA57BA69FFD09A5A6A5A5A5
%CDA5C7A5CDA5C8A5CDA5C8A6CEA6CEA7CEA7CFA7CFA8CFA7CFA7CFA7CFA7
%CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7
%C8A6A6A5A5A6CEA6CEA6C8A6CDA6C8A5CDA5A6A5A6A5A5A5CDA5C7A5CDA5
%C7A5C7A5A5A5C7A5A5A5C8A5A5A5A6FD0AA59F7BA59FA57BA5A5A59FFD04
%A5A6A5A5A5A6FD0BA5A6A5A6A6C9A6A7A7CAA7A8A7CAA7A7A7CAA7A8A7CA
%A7CAA7CAA7A7A7C9A7A7A6A7FD06A6A5A6A5A57BA57BA57BA59FA57BA5A5
%A59FA5A5A59FA5A5A57BA59FA57BA59FA59FA5A5A59FFD0BA59FA5A5A57B
%A5A5A57BA57BA5A59FFD04A5A6A5A5A5A67BCDA5C8A5C8A5CDA5C8A5CDA5
%C8A5CDA5C8A5CDA5C7A5CDA5C8A5CDA6C9A6CEA7CFA7CFA7C9A6C9FD06A6
%A5A6FD06A59FA5A5A57BA59FA57BA5A5A59FA5A5A59FFD08A5A6A5A5A5A6
%A5A5A5A6A5A6A5C8A5A6A5C8A5A6A5A6A5A5A5A6A5A5A5A6A5A57B9FA5A5
%9FA5A57BA57BA59FA57BA5A5A550757BFD0DA550FD0FA59FA5A5A57BA59F
%A57BA59FA57BA59FA57BA57BA57BA57BA57BA57BA57BA59FA59FA5A5A59F
%A5A5A57B9FFD1AA59FA5A5A59FA59FA57BA5A57B26A57BA57BA5A59FFD04
%A5A69FA5A5517B517BC87BA651CDA5C8A5CDA5C8A57B7BA5A5CDA5A5A5C8
%A5A5A5A6FD0BA5A6A5A5A5A6A5A5A5A6A5A5A5A6A5A5A5A6A5A6A5C8A5A6
%A5C8A5A57BCDFD04A551CD9F7BA5C8A5CDA5C8A5CDA5C8A5CDA5C8A5CDA5
%C8A5CDA5A6A5C8A5A6A5A6A5A5A5517BA59F517BFD04A57BA57BFD04A59F
%7B7B267B26A5A57B7B277BCDA5A5A5C8A5C75051757BA5A54AA57BA59FA5
%7BA5A5A59FA5A5A59FA5A5A59FA5A5A59FFD16A55150A57B7B7B51A55126
%FD04A5A6A5A5A5A6A5A5A5C8A5A5A5C8FD0DA57B267B75A5267BA5A57BFD
%04A59FA5A5A57B7B51512651A5A526A5267BA5A6FD05A57B267B50A57B51
%7BA59FA5A5A59FFD10A5A6A5A5A5A6A5A5A5A6A5A5A5A6A5A5A5A6A5A5A5
%C8A55126A5517B50A52651A5C8A5A6A5C8A5A6A5C8A5A6A5C8A5A6A5C8A5
%A6A5C8A5A5A5A6A5A5A5C851277B519F5126A5A5A57B2651265126512651
%26272626265126262627265126512651265126262627264B265126512651
%265126512651265126512651265126512651265126512651265126512651
%265126512651265126512626262726272627265126512651265126512651
%265126512651265126512651265126512651262726512651262626512651
%512627265126272651262726512627265126272651262726512651265126
%512651262726272627262726272627262726272627262726272627262726
%512627265126272627262726512651265126512651265126512651265126
%272651265126512651265126512651265126512627265126272651265126
%512651265126272626272627262726272651264B26512627264B26272627
%26272627262726512627262726272651505150752651265126514A515051
%4A5150512651265150515051505126512651262726272627262726272627
%262726272627262726272627262726272627262726272627262726272627
%262726272627262726512651265126275126512651265150515051505150
%7B5075505150515051505150515051505150515051507B507B7A7B507B74
%7B507B7A7B747B7A7B747B7A7B507B747B747B7A7B507B747B507B507550
%7B5051505150515051505150515051505150515051505150515051505150
%5150515051265150512651265126512651265126512651262627264B2627
%264B26512651265126512651265126512651265126512651265126512651
%265126512651265126512651265126512651265126512651265126512651
%265126512651265126512651265126512651265126512651265126512651
%265126512651265126512651265126512651264B2627264B2627264B2627
%264B4B264B265126514A512651265126512651264B264B26514A51265126
%51264B26512651264B264B264B264B264B264B264B264B264B264B264B26
%4B264B2651264B264B264B264B264B2651264B264B264B264B265126514A
%512651264B264B264B2651264B264B26512651264B264B264B2651264B26
%4B264B2651264B265126262726512651265126512651265126512651264B
%26272651265126512651265126512651264B264B2627264B2651264B2627
%265126272651264B2651262726512627264B2627264B26272651264B2651
%26512651265126512651264B264B26512651264B264B26512651264B2627
%26512651264B262726512651264B2627264B514A51265126512651265126
%5150512651504B2651265126515051265150512651505126515051264B26
%4B26515051264B2651265126512651265126512651264B264B264B264B26
%4B2651264B2651265126512651265126512651264B265126515051265126
%4B265126512651265126512651264B265150515051264B2651262651264B
%265126512651265126512651265126512627265126512651265126512651
%2651265126512627265126512651262726512651264B2651265126272651
%2627264B264B264B262726272651264B2651264B26512651265126272651
%2627265126262651264B265126262651265126512626265126512651264B
%26512651514A514A5151514A5150512651265126514A51265126514A5150
%512651265126512651265126512651265126512651265126512651505126
%51505126512651265126512651265126512651264B4A5126514A51265150
%51505150512651505126514A51265150514A515151265151514A51515126
%5126512651265126514A5126265126512651265126512651265126512651
%2651264B265126512651265126512651265126512651264B265126512651
%264B26512651265126512651264B26512627265126512651264B26512651
%265126512651265126512651264B265126512651264B2651265126512627
%265126512651262726512651265126512651265151265126512651265126
%5126512651505126515051265150512651505126514A5126514A51265150
%512651505126515051265150512651505126515051265150512651505126
%51505126514A4B2651505126514A51265126512651264B26514A51265126
%4B26514A512651265126512651265126512651505126514A51265150264B
%26512651265126512651264B265126512651262726512651265126512651
%264B26512651265126272651265126512627265126512651265126512626
%2651262626512651265126262651264B2651264B26512651265126512651
%26512651264B264B26512651264B265126512651264B2651265126512651
%265126512651512651265126514A51265126512651265126512651265126
%512651265126514A51265126512651265126512651265126512651265126
%512651265126512651265126514A5126514A512651265126514A51265151
%5126512651265126512651265126512651265126512651265126514A5126
%51265126514A512651265126512626512651265126512651265126512651
%26512651264B265126512651265126512651265126512651262726512651
%2651265126512651265126512651264B26512627265126512651264B2651
%265126512651265126512651265126512651265126512651265126512651
%265126512651265126512651265126512651265126515126512651265126
%512651265126512651265126515051265150512651505126514A51265150
%512651265126515051265126512651265126512651265126512651265126
%51505126515051265150512651505126514A512651265126512651265126
%5126514A512651505126514A512651505126515051265126512651265126
%265126512651265126512651265126512651265126512651265126512651
%265126512651265126512651265126512651265126512651265126512651
%265126512651264B26512651265126512651265126512651265126512651
%265126512651265126512651265126512651265126512651265126512651
%2651265126512651
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(FILTERiT4 Trail  ver4.2 for Win AICS5) (FILTERiT4 Live Trail ver4.2 for Win AICS5) (FILTERiT4.aip)
%AI8_PluginGroupInfo
(FILTERiT4 Tiling  ver4.2 for Win AICS5) (FILTERiT4 Live Tiling ver4.2 for Win AICS5) (FILTERiT4.aip)
%AI8_PluginGroupInfo
(FILTERiT4 DropShadow  ver4.2 for Win AICS5) (FILTERiT4 Live Shadow ver4.2 for Win AICS5) (FILTERiT4.aip)
%AI8_PluginGroupInfo
(FILTERiT4 Reflections  ver4.2 for Win AICS5) (FILTERiT4 Live Reflections ver4.2 for Win AICS5) (FILTERiT4.aip)
%AI8_PluginGroupInfo
(FILTERiT4 Neon  ver4.2 for Win AICS5) (FILTERiT4 Live Neon ver4.2 for Win AICS5) (FILTERiT4.aip)
%AI8_PluginGroupInfo
(FILTERiT4 Generation  ver4.2 for Win AICS5) (FILTERiT4 Live Generation ver4.2 for Win AICS5) (FILTERiT4.aip)
%AI8_PluginGroupInfo
(FILTERiT4 Galaxy  ver4.2 for Win AICS5) (FILTERiT4 Live Galaxy ver4.2 for Win AICS5) (FILTERiT4.aip)
%AI8_PluginGroupInfo
(FILTERiT4 Frame  ver4.2 for Win AICS5) (FILTERiT4 Live Frame ver4.2 for Win AICS5) (FILTERiT4.aip)
%AI8_PluginGroupInfo
(FILTERiT4 Explosion  ver4.2 for Win AICS5) (FILTERiT4 Live Explosion ver4.2 for Win AICS5) (FILTERiT4.aip)
%AI8_PluginGroupInfo
(FILTERiT4 Emboss  ver4.2 for Win AICS5) (FILTERiT4 Live Emboss ver4.2 for Win AICS5) (FILTERiT4.aip)
%AI8_PluginGroupInfo
(FILTERiT4 Cutout  ver4.2 for Win AICS5) (FILTERiT4 Live Cutout ver4.2 for Win AICS5) (FILTERiT4.aip)
%AI8_PluginGroupInfo
(FILTERiT4 Circle  ver4.2 for Win AICS5) (FILTERiT4 Live Circle ver4.2 for Win AICS5) (FILTERiT4.aip)
%AI8_PluginGroupInfo
(FILTERiT4 Border  ver4.2 for Win AICS5) (FILTERiT4 Live Border ver4.2 for Win AICS5) (FILTERiT4.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
2 Bn
%AI5_BeginGradient: (Unnamed gradient 13)
(Unnamed gradient 13) 0 3 Bd
[
<
2F3031333435363738393A3B3C3E3F4142434445464748494A
>
<
14161718191A1B1C1D1E1F2020222425262728292A2B2C2D2E
>
<
E4E5E6E7E8E8E9EBEAECEDECEEF0F1F3F5F6F7F9FAFBFDFDFF
>
<
00000000000000000000000000000000000000000000000000
>
<
D8D7D6D5D4D3D2D1D0CFCECDCCCAC9C8C7C6C5C4C3C2C1C0BF
>
<
D2D1D0CFCECDCCCBCAC9C8C7C6C4C3C2C1C0BFBEBDBCBBBAB9
>
<
4342424140403F3E3E3D3C3C3B3A3A39383837363635343433
>
4 %_Br
<
4A4948474645444342413F3E3C3B3A3938373635343331302F
>
<
2E2D2C2B2A2928272625242220201F1E1D1C1B1A1918171614
>
<
FFFDFDFBFAF9F7F6F5F3F1F0EEECEDECEAEBE9E8E8E7E6E5E4
>
<
00000000000000000000000000000000000000000000000000
>
<
BFC0C1C2C3C4C5C6C7C8C9CACCCDCECFD0D1D2D3D4D5D6D7D8
>
<
B9BABBBCBDBEBFC0C1C2C3C4C6C7C8C9CACBCCCDCECFD0D1D2
>
<
333434353636373838393A3A3B3C3C3D3E3E3F404041424243
>
4 %_Br
[
0.290806 0.179202 0.99826 0.001404 0.74902 0.72549 0.2 2 50 100 %_BS
%_0.290806 0.179202 0.99826 0.001404 0.74902 0.72549 0.2 2 50 100 Bs
0.182589 0.079255 0.892515 0 0.847059 0.823529 0.262745 2 50 78.2383 %_BS
%_0.182589 0.079255 0.892515 0 0.847059 0.823529 0.262745 2 50 78.2383 Bs
0.290806 0.179202 0.99826 0.001404 0.74902 0.72549 0.2 2 50 5.69948 %_BS
%_0.290806 0.179202 0.99826 0.001404 0.74902 0.72549 0.2 2 50 5.69948 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 2)
(Unnamed gradient 2) 0 2 Bd
[
<
4A4948474645444342413F3E3C3B3A3938373635343331302F
>
<
2E2D2C2B2A2928272625242220201F1E1D1C1B1A1918171614
>
<
FFFDFDFBFAF9F7F6F5F3F1F0EEECEDECEAEBE9E8E8E7E6E5E4
>
<
00000000000000000000000000000000000000000000000000
>
<
BFC0C1C2C3C4C5C6C7C8C9CACCCDCECFD0D1D2D3D4D5D6D7D8
>
<
B9BABBBCBDBEBFC0C1C2C3C4C6C7C8C9CACBCCCDCECFD0D1D2
>
<
333434353636373838393A3A3B3C3C3D3E3E3F404041424243
>
4 %_Br
[
0.182589 0.079255 0.892515 0 0.847059 0.823529 0.262745 2 50 100 %_BS
%_0.182589 0.079255 0.892515 0 0.847059 0.823529 0.262745 2 50 100 Bs
0.290806 0.179202 0.99826 0.001404 0.74902 0.72549 0.2 2 50 0 %_BS
%_0.290806 0.179202 0.99826 0.001404 0.74902 0.72549 0.2 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.75021 0.679683 0.670222 0.90164 ([Registration]) 0 Xs
([Registration])
Pc
0.625452 0.536828 0.94995 0.550347 0.243137 0.243137 0.090196 Xa
(R=62 G=62 B=23)
Pc
0.550927 0.602594 0.917906 0.58349 0.266667 0.215686 0.090196 Xa
(R=68 G=55 B=23)
Pc
0.588006 0.51281 1 0.440497 0.309804 0.298039 0.098039 Xa
(R=79 G=76 B=25)
Pc
0.575006 0.491157 1 0.379431 0.345098 0.333333 0.109804 Xa
(R=88 G=85 B=28)
Pc
0.480873 0.381384 1 0.14316 0.517647 0.494118 0.109804 Xa
(R=132 G=126 B=28)
Pc
0.290806 0.179202 0.99826 0.001404 0.74902 0.72549 0.2 Xa
(R=191 G=185 B=51)
Pc
0.182589 0.079255 0.892515 0 0.847059 0.823529 0.262745 Xa
(R=216 G=210 B=67)
Pc
0.124758 0.100923 0.363989 0 0.878431 0.847059 0.67451 Xa
(R=224 G=216 B=172)
Pc
0.038758 0.030884 0.2663 0 0.960784 0.933333 0.772549 Xa
(R=245 G=238 B=197)
Pc
0 0 0 0 1 1 1 Xa
(R=255 G=255 B=255)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(fon) Ln
0 A
u
1 Ap
0 O
0.038758 0.030884 0.2663 0 0.960784 0.933333 0.772549 Xa
0 J 0 j 1 w 10 M []0 d0 XR
2750 -2400.8848 m
2250 -2400.8848 L
2250 -2150.8848 L
2750 -2150.8848 L
2750 -2400.8848 L
f
u
0 Ap
0.017487 0.01178 0.119692 0 0.980392 0.968627 0.886275 Xa
2750 -2264.0273 m
2750 -2251.7603 L
2701.667 -2256.0332 2700.7588 -2246.2163 2653.4014 -2243.0488 c
2514.7217 -2233.7725 2684.7109 -2226.165 2750 -2227.3667 C
2750 -2211.7368 L
2738.166 -2209.8696 2720.5977 -2208.5889 2694.6396 -2208.5889 c
2598.6035 -2208.5889 2657.3555 -2227.7959 2487.9517 -2227.7959 c
2318.5483 -2227.7959 2638.7139 -2250.3916 2425.7412 -2250.3916 c
2212.7705 -2250.3916 2376.0288 -2262.8198 2428.5654 -2262.8198 c
2481.103 -2262.8198 2560.7559 -2279.2021 2469.8032 -2275.8848 c
2378.8521 -2272.5669 2378.1436 -2279.083 2318.4077 -2283.4663 c
2209.3867 -2291.4663 2482.2334 -2293.3252 2490.707 -2294.7373 c
2499.1807 -2296.1494 2670.9131 -2278.6377 2564.9922 -2278.6377 c
2477.0083 -2278.6377 2679.0449 -2267.7236 2750 -2264.0273 C
f
2250 -2251.7603 m
2250 -2264.0273 L
2278.6519 -2263.7378 2287.3994 -2249.2808 2326.1665 -2245.2554 c
2364.9336 -2241.2305 2448.5557 -2221.1704 2401.3081 -2219.6748 c
2367.8369 -2218.6157 2303.6665 -2221.3667 2250 -2211.7368 C
2250 -2227.3667 L
2313 -2224.9224 2309.2222 -2246.0332 2250 -2251.7603 C
f
2326.3159 -2189.5996 m
2384.8911 -2197.061 2421.645 -2205.9053 2482.2319 -2203.3633 c
2542.8184 -2200.8213 2746.1865 -2187.687 2638.9951 -2186.416 c
2531.8027 -2185.145 2221.2451 -2176.2163 2326.3159 -2189.5996 c
f
U
U
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 1 255 79 79 0 50 Lb
(mountain) Ln
0 A
u
0 O
0.124758 0.100923 0.363989 0 0.878431 0.847059 0.67451 Xa
0 J 0 j 1 w 10 M []0 d0 XR
2250 -2319.9316 m
2750 -2319.9316 L
2750 -2293.1421 L
2744.5635 -2292.8228 2739.832 -2292.6338 Y
2725.0029 -2289.6011 L
2719.6357 -2292.9312 L
2692.3789 -2292.9312 L
2684.3291 -2298.6401 2678.8213 -2301.1323 v
2673.3135 -2303.625 2653.4746 -2301.0713 Y
2639.4189 -2298.957 L
2630.2402 -2292.4023 L
2622.3301 -2288.5967 L
2615.6924 -2294.8345 2612.7266 -2296.4199 v
2609.7607 -2298.0063 2607.6426 -2298.6401 2597.0498 -2298.957 c
2586.458 -2299.2739 2571.4873 -2298.957 Y
2554.6816 -2295.7852 2553.4111 -2295.1514 v
2552.1396 -2294.5176 2544.5137 -2291.3457 2543.2422 -2291.3457 c
2541.9717 -2291.3457 2536.8867 -2296.103 2533.4971 -2297.0547 c
2530.1084 -2298.0063 2512.1572 -2297.3716 Y
2491.5532 -2298.957 L
2482.2319 -2298.957 2480.9604 -2298.957 v
2479.6899 -2298.957 2464.0132 -2298.957 Y
2450.8794 -2293.248 2447.4897 -2292.6338 v
2444.1001 -2292.021 2436.4741 -2288.1738 2431.3896 -2285.0874 c
2426.3057 -2282.0005 2421.645 -2283.4165 2418.5015 -2282.7817 c
2415.3579 -2282.1479 2406.7681 -2276.8379 Y
2385.6318 -2291.3457 2383.5132 -2292.6338 v
2381.395 -2293.9233 2373.7686 -2291.9795 2367.8306 -2288.8076 c
2361.8921 -2285.6367 2362.6733 -2289.2725 2360.2705 -2289.4912 c
2357.8677 -2289.7095 2349.5293 -2290.4463 2348.8848 -2290.5005 c
2348.2397 -2290.5562 2343.687 -2285.0874 Y
2338.1792 -2291.3579 L
2329.2817 -2302.4458 2325.4688 -2302.7842 v
2321.6558 -2303.1226 2317.8423 -2302.7627 2316.1475 -2302.7778 c
2314.4526 -2302.7925 2306.4028 -2302.7778 Y
2296.3403 -2294.8188 L
2288 -2297.1445 2281.8335 -2300.229 V
2277.4873 -2299.9668 2262.4165 -2293.1421 2250 -2293.1421 C
2250 -2319.9316 L
f
0.290806 0.179202 0.99826 0.001404 0.74902 0.72549 0.2 Xa
2750 -2305.4224 m
2744.6475 -2305.4604 2740.4131 -2305.5537 2740.1143 -2305.7534 c
2739.2676 -2306.3179 2722.6025 -2291.9126 Y
2731.6406 -2305.7534 L
2719.6357 -2297.8442 L
2724.0146 -2306.3179 L
2703.1133 -2307.4478 L
2705.6553 -2300.229 L
2699.7236 -2305.4702 L
2704.2441 -2291.9126 L
2697.0391 -2306.0347 L
2693.5098 -2294.7373 L
2693.5098 -2304.9058 L
2691.25 -2303.4932 2685.3184 -2294.7373 Y
2690.4033 -2305.7534 L
2675.998 -2305.7534 2658.4863 -2308.2944 Y
2721.2197 -2308.6338 2750 -2308.5234 V
2750 -2305.4224 L
f
2250 -2303.8823 m
2250 -2344.0601 L
2340.8599 -2343.8198 2563.5215 -2343.3135 2587.0029 -2344.0444 C
2573.2109 -2342.3804 2491.7134 -2329.6514 2402.0156 -2316.3799 c
2316.3877 -2303.7109 2282.5459 -2302.876 2250 -2303.8823 C
Bb
1 (Unnamed gradient 2) 2251.1831 -2323.8184 0 54.8695 1 0 0 1 0 0 Bg
54.8695 0 0 -45.1841 2251.1831 -2300.876 Xm
7946.3662 0 0 -45.1841 -5695.1831 -2300.876 Bc
54.8695 0 0 -45.1841 2251.1831 -2300.876 Bm
7946.3662 0 0 -45.1841 2306.0527 -2300.876 Bc
f
0 BB
2750 -2344.1367 m
2750 -2303.8823 L
2712.543 -2303.8823 2419.9438 -2305.9302 2286.5073 -2344.1367 C
2750 -2344.1367 L
Bb
1 (Unnamed gradient 13) 2291.3623 -2323.4536 -0.140569 460.4048 1 0 0 1 0 0 Bg
460.4034 -1.12955 -0.111363 -45.3913 2291.418 -2300.7573 Xm
7990.1431 -19.603 -0.111363 -45.3913 -5672.4844 -2281.2188 Bc
333.9712 -0.819364 -0.111363 -45.3913 2317.6587 -2300.8218 Bm
100.1916 -0.24581 -0.111363 -45.3913 2651.6299 -2301.6411 Bm
7990.1431 -19.603 -0.111363 -45.3913 2751.8213 -2301.8867 Bc
f
0 BB
2527.9893 -2314.791 m
2529.0068 -2314.8491 2535.0508 -2300.6689 y
2531.5195 -2313.0967 l
2542.6768 -2303.8823 l
2538.1279 -2310.6245 l
2557.6475 -2303.5762 l
2547.4795 -2312.249 l
2572.6191 -2313.3784 l
2604.2529 -2313.0967 l
2605.9473 -2311.1196 l
2599.4502 -2305.1875 l
2609.6191 -2309.9893 l
2598.04 -2297.2798 l
2615.5508 -2312.5313 l
2610.4668 -2294.7373 l
2617.5293 -2309.4248 l
2617.5293 -2298.127 l
2622.3291 -2311.4019 l
2703.1133 -2309.4248 l
2642.9482 -2316.2739 2627.4141 -2316.3799 v
2611.8789 -2316.4858 2562.4502 -2317.3325 2541.2666 -2319.3101 c
2520.082 -2321.2881 2469.8032 -2326.0894 y
2503.1348 -2313.3784 2527.9893 -2314.791 v
Bb
1 (Unnamed gradient 13) 2586.0889 -2322.2202 85.272 44.4852 1 0 0 1 0 0 Bg
3.66671 44.3338 234.3424 -19.3817 2468.9175 -2312.5293 Xm
683.5974 8265.3076 234.3424 -19.3817 1785.5288 -10575.3105 Bc
2.65979 32.1592 234.3424 -19.3817 2469.1265 -2310.0024 Bm
0.797939 9.6478 234.3424 -19.3817 2471.7861 -2277.8433 Bm
683.5974 8265.3076 234.3424 -19.3817 2472.584 -2268.1953 Bc
f
0 BB
U
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 3 79 79 255 0 50 Lb
(ground) Ln
0 A
u
u
0 O
0.575006 0.491157 1 0.379431 0.345098 0.333333 0.109804 Xa
0 J 0 j 1 w 10 M []0 d0 XR
2750 -2335.6523 m
2250 -2335.6523 L
2250 -2400.8848 L
2750 -2400.8848 L
2750 -2335.6523 L
f
0.588006 0.51281 1 0.440497 0.309804 0.298039 0.098039 Xa
2750 -2367.7358 m
2742.667 -2368.811 2737.4463 -2368.2612 2733.9443 -2368.2686 c
2722.75 -2368.2915 2719.8379 -2370.4614 2707.5205 -2364.9404 c
2695.2031 -2359.4189 2674.583 -2357.1602 2658.2012 -2360.8315 c
2641.8193 -2364.5034 2633.0635 -2368.1763 2619.7881 -2365.0688 c
2606.5117 -2361.9614 2604.8184 -2350.9448 2589 -2360.5483 c
2573.1826 -2370.1528 2572.334 -2358.855 2557.3643 -2361.6792 c
2542.3945 -2364.5034 2499.8857 -2364.5034 2487.9517 -2364.7856 c
2476.0171 -2365.0679 2466.4194 -2356.0474 2438.1709 -2363.8057 c
2409.9224 -2371.5645 2396.3657 -2365.2549 2383.0894 -2368.2686 c
2369.814 -2371.2822 2323.2095 -2363.8931 2339.0264 -2367.5874 c
2354.8433 -2371.2822 2375.7446 -2374.7593 2352.3013 -2373.8682 c
2328.8584 -2372.9771 2316.4302 -2373.2593 2299.4824 -2363.0908 c
2282.5352 -2352.9224 2289.5005 -2362.2002 2272.5 -2362.2002 c
2264.3589 -2362.2002 2253.5317 -2367.7065 2250 -2367.7358 C
2250 -2372.3604 L
2263.1665 -2371.6445 2271.6665 -2365.7554 2280.8335 -2368.8389 c
2301.8354 -2375.9033 2324.9033 -2376.6489 2349.4771 -2376.6489 c
2374.0513 -2376.6489 2382.5239 -2379.4731 2403.1436 -2376.6489 c
2423.7632 -2373.8247 2461.3306 -2371.2856 2484.4927 -2370.8604 c
2507.6533 -2370.4351 2516.6904 -2375.2407 2541.8301 -2370.8604 c
2566.9688 -2366.48 2561.6025 -2376.6821 2578.5498 -2372.146 c
2595.498 -2367.6108 2593.8027 -2361.6328 2608.4893 -2367.5874 c
2623.1768 -2373.5425 2623.459 -2374.312 2646.9033 -2370.9614 c
2670.3477 -2367.6108 2683.3408 -2360.4526 2697.0391 -2368.2686 c
2710.7383 -2376.0845 2704.2422 -2373.8774 2725.709 -2373.0034 c
2736.3564 -2372.5698 2744.2227 -2372.4292 2750 -2372.3604 C
2750 -2367.7358 L
f
2729.2393 -2384.6465 m
2682.6338 -2393.4917 2704.2422 -2374.6826 2682.6338 -2378.8252 c
2661.0264 -2382.9673 2651.2813 -2376.2251 2631.3682 -2378.8252 c
2611.4551 -2381.4248 2614.8447 -2366.9038 2586.0342 -2376.2251 c
2557.2236 -2385.5454 2521.2109 -2378.7671 2485.1978 -2383.0601 c
2449.1846 -2387.353 2449.1846 -2377.0728 2424.6108 -2383.0601 c
2400.0371 -2389.0474 2393.2583 -2375.8013 2369.5317 -2380.73 c
2345.8057 -2385.6582 2325.8921 -2385.1226 2291.9976 -2376.6489 c
2264.3145 -2369.7275 2272.6113 -2378.5894 2250 -2381.145 C
2250 -2400.8848 L
2277.8076 -2400.8848 L
2278.7847 -2391.019 2279.9937 -2380.3208 Y
2283.9741 -2400.8848 L
2314.5605 -2400.8848 L
2318.1304 -2398.3013 2320.9507 -2396.4204 Y
2393.2598 -2384.043 2390.4346 -2385.4297 v
2387.6099 -2386.8169 2366.0015 -2395.856 Y
2388.1753 -2393.0972 2396.6494 -2394.1948 v
2405.1226 -2395.291 2419.8096 -2395.6401 2424.0464 -2394.1948 c
2428.2832 -2392.7485 2428.5654 -2388.8027 2435.062 -2391.623 c
2438.189 -2392.98 2441.5117 -2396.7622 2444.5278 -2400.8848 C
2483.7642 -2400.8848 L
2482.5146 -2391.623 L
2487.2446 -2400.8848 L
2517.54 -2400.8848 L
2517.54 -2389.9238 L
2522.0576 -2394.1948 L
2529.4033 -2386.9438 L
2529.4033 -2394.1948 L
2598.8877 -2380.3208 L
2567.5342 -2394.5103 2568.3818 -2394.1948 v
2569.2295 -2393.8784 2591.5439 -2395.5728 Y
2597.8428 -2400.8848 L
2656.7734 -2400.8848 L
2638.1494 -2391.623 L
2678.8213 -2395.5728 L
2686.4492 -2386.9438 L
2687.2969 -2391.623 L
2719.6357 -2393.0303 L
2731.542 -2400.8848 L
2750 -2400.8848 L
2750 -2381.145 L
2743.7822 -2382.0396 2736.9023 -2383.1919 2729.2393 -2384.6465 c
f
0.550927 0.602594 0.917906 0.58349 0.266667 0.215686 0.090196 Xa
2250 -2351.0425 m
2250 -2364.2144 L
2255.0835 -2364.6021 2255.2915 -2359.7271 2257.8335 -2361.0186 c
2259.4468 -2361.8384 2260.2529 -2361.3149 2264.2085 -2357.6436 c
2268.1621 -2353.9722 2283.3833 -2353.353 2294.1152 -2355.4077 c
2304.8472 -2357.4624 2312.4761 -2353.353 2314.7358 -2355.9731 c
2316.9966 -2358.5928 2319.5386 -2353.353 2320.9497 -2364.1646 c
2322.3618 -2374.9761 2326.5991 -2350.7349 2327.729 -2359.645 c
2328.8584 -2368.5542 2332.813 -2363.3174 2333.0967 -2385.9126 c
2333.3789 -2408.5093 2337.3335 -2361.0571 2337.6147 -2356.5381 c
2337.897 -2352.019 2341.8521 -2355.1255 2350.0439 -2356.8203 c
2358.2349 -2358.5151 2356.8228 -2355.1255 2358.2339 -2355.6909 c
2359.6455 -2356.2563 2368.1201 -2354.8433 2368.686 -2357.6675 c
2369.2505 -2360.4917 2378.2886 -2353.353 2381.96 -2355.6909 c
2385.6318 -2358.0283 2392.1284 -2356.2554 2394.3882 -2359.645 c
2396.6494 -2363.0342 2400.0386 -2354.8433 2401.4497 -2359.0806 c
2402.8613 -2363.3174 2408.2285 -2359.0806 2409.9233 -2387.3257 c
2411.6182 -2415.5708 2413.5967 -2359.0806 2415.0073 -2364.4468 c
2416.4194 -2369.813 2427.7183 -2353.353 2430.5439 -2358.5151 c
2433.3682 -2363.6772 2439.0181 -2358.2329 2441.8413 -2379.1343 c
2444.6665 -2400.0352 2447.2085 -2356.2554 2447.2085 -2358.2329 c
2447.2085 -2360.2104 2454.2705 -2356.2554 2458.5073 -2359.645 c
2462.7437 -2363.0342 2465.5674 -2354.5601 2466.6978 -2357.6675 c
2467.8267 -2360.7749 2475.4546 -2353.353 2476.3018 -2361.6226 c
2477.1494 -2369.8916 2478.8442 -2352.0186 2484.7759 -2356.5381 c
2490.707 -2361.0581 2485.9043 -2366.9888 2487.9517 -2387.043 c
2489.9985 -2407.0981 2492.1187 -2368.4014 2493.5308 -2357.9497 c
2494.9438 -2347.4985 2499.1807 -2353.353 2504.2646 -2386.478 c
2509.3496 -2419.6035 2510.4775 -2353.353 2513.0205 -2363.0342 c
2515.5625 -2372.7153 2518.6699 -2354.8433 2522.0576 -2372.4985 c
2525.4463 -2390.1528 2526.5781 -2354.5601 2529.6865 -2361.0571 c
2532.792 -2367.5542 2532.2285 -2371.5078 2535.0508 -2387.8906 c
2537.752 -2403.5654 2539.0352 -2365.5249 2539.6475 -2355.2573 C
2541.9443 -2354.6445 2544.6035 -2355.6636 2544.7256 -2358.3735 c
2545.2861 -2370.8618 2548.3262 -2396.9292 2550.0215 -2383.1587 c
2551.7158 -2369.3892 2551.5039 -2361.9751 2552.3516 -2358.3735 c
2553.1992 -2354.7725 2557.2236 -2364.3052 2559.3428 -2359.4326 c
2561.4609 -2354.5601 2563.3672 -2359.8833 2567.6045 -2357.5396 c
2571.8408 -2355.1958 2572.0527 -2361.2393 2576.7129 -2357.2964 c
2580.0879 -2354.4409 2583.4609 -2352.8066 2585.0664 -2352.1216 C
2588.1904 -2352.5283 2592.333 -2353.3638 2595.8037 -2355.0757 c
2602.3467 -2358.3032 2600.2275 -2351.7363 2604.2529 -2356.6084 c
2608.2773 -2361.481 2609.9727 -2403.002 2610.8193 -2391.1387 c
2611.667 -2379.2759 2613.7861 -2352.1597 2615.6924 -2357.6675 c
2617.5986 -2363.1753 2623.9541 -2355.3374 2623.9541 -2357.4561 c
2623.9541 -2359.5747 2623.7422 -2378.0078 2626.2842 -2372.4985 c
2628.8262 -2366.9888 2627.5557 -2350.0415 2629.4619 -2355.5493 c
2631.3682 -2361.0571 2637.7764 -2346.4038 2637.75 -2356.9077 c
2637.7236 -2367.4126 2641.3252 -2401.519 2642.3848 -2385.6309 c
2643.4434 -2369.7427 2644.0791 -2348.5586 2645.9854 -2357.4561 c
2647.8926 -2366.353 2651.9688 -2369.9546 2652.5527 -2363.811 c
2653.1367 -2357.6675 2658.0605 -2350.6772 2658.6963 -2355.7612 c
2659.332 -2360.8452 2665.0518 -2351.1006 2665.8984 -2356.6084 c
2666.7461 -2362.1162 2671.6182 -2395.5874 2672.2539 -2380.7588 c
2672.8896 -2365.9292 2675.6436 -2350.2534 2677.126 -2357.8794 c
2678.6094 -2365.5059 2680.3037 -2371.0142 2680.7275 -2365.2939 c
2681.1514 -2359.5747 2681.7871 -2354.0664 2683.6934 -2357.6675 c
2685.5996 -2361.269 2687.9307 -2354.4897 2689.4131 -2356.8203 c
2690.8965 -2359.1509 2697.6748 -2355.3374 2697.6748 -2357.2437 c
2697.6748 -2359.1509 2701.7002 -2394.9517 2702.7588 -2383.7241 c
2703.8184 -2372.4966 2707.208 -2373.7681 2707.4199 -2367.6245 c
2707.6318 -2361.481 2712.292 -2369.7427 2713.3516 -2362.752 c
2714.4102 -2355.7612 2721.1895 -2362.54 2722.249 -2358.3032 c
2723.3076 -2354.0664 2729.0273 -2360.4214 2730.7227 -2358.0913 c
2732.417 -2355.7612 2733.999 -2392.7798 2736.167 -2381.7554 c
2738.3291 -2370.7593 2737.9248 -2368.8955 2740.0439 -2363.1753 c
2742.1621 -2357.4561 2745.1279 -2368.2598 2745.5518 -2363.1753 c
2745.8242 -2359.9019 2747.8535 -2363.2998 2750 -2364.2144 C
2750 -2351.0425 L
2250 -2351.0425 L
f
U
u
0.625452 0.536828 0.94995 0.550347 0.243137 0.243137 0.090196 Xa
2734.4414 -2335.6523 m
2731.5449 -2326.6377 2725.4414 -2307.625 2726.5566 -2321.0049 c
2727.082 -2327.312 2727.6875 -2332.0908 2728.0596 -2335.6523 C
2722.8945 -2335.6523 L
2721.4824 -2328.3862 2720.5693 -2320.4487 2720.0605 -2327.2192 c
2719.7842 -2330.8999 2719.3584 -2333.6167 2718.8711 -2335.6523 C
2715.7109 -2335.6523 L
2716.0039 -2328.7212 2716.4131 -2318.917 2713.8467 -2321.8525 c
2711.6309 -2324.3843 2709.5039 -2330.6401 2708.0615 -2335.6523 C
2587.8584 -2335.6523 L
2588.4756 -2333.0771 2589.002 -2329.6821 2589.002 -2325.5249 c
2589.002 -2318.5557 2583.6514 -2328.6665 2580.3135 -2335.6523 C
2577.4072 -2335.6523 L
2577.1123 -2331.5342 2576.5381 -2325.9478 2575.4443 -2321.5703 c
2573.9443 -2315.5757 2573.4199 -2329.8584 2572.7607 -2335.6523 C
2571.3311 -2335.6523 L
2570.623 -2333.8369 2569.8896 -2332.4375 2567.5342 -2326.6543 c
2565.0723 -2320.6118 2566.5098 -2331.0518 2567.2139 -2335.6523 C
2565.624 -2335.6523 L
2563.7461 -2333.9097 2560.2256 -2331.0654 2553.9766 -2327.2192 c
2545.7695 -2322.1694 2551.8281 -2329.3223 2558.3711 -2335.6523 C
2379.7241 -2335.6523 L
2378.9448 -2333.3379 2378.1265 -2330.3696 2377.4409 -2326.6543 c
2376.1577 -2319.6899 2374.9946 -2328.7778 2373.7954 -2335.6523 C
2367.395 -2335.6523 L
2366.5752 -2333.7271 2365.5376 -2331.1104 2364.1665 -2327.5015 c
2360.4966 -2317.8433 2361.8462 -2328.1626 2363.0659 -2335.6523 C
2361.1211 -2335.6523 L
2359.3037 -2331.7285 2356.9966 -2326.4648 2355.1284 -2321.2881 c
2352.3662 -2313.6392 2353.7588 -2328.043 2354.6187 -2335.6523 C
2321.5376 -2335.6523 L
2321.0776 -2331.8271 2320.3696 -2327.1426 2318.6899 -2322.9043 c
2316.5464 -2317.4971 2316.3232 -2328.1025 2315.8779 -2335.6523 C
2312.2251 -2335.6523 L
2311.5557 -2324.4775 2309.3687 -2322.9043 Y
2309.1509 -2330.1001 2308.4468 -2335.6523 V
2299.2388 -2335.6523 L
2299.7681 -2332.6538 2300.4731 -2328.5815 2301.1772 -2322.9043 c
2302.1665 -2314.936 2296.0889 -2327.7285 2292.165 -2335.6523 C
2290.4224 -2335.6523 L
2292.8311 -2327.9058 2297.1895 -2315.0015 2294.1152 -2317.0513 c
2290.9302 -2319.1743 2287.7456 -2329.9155 2286.0015 -2335.6523 C
2283.3608 -2335.6523 L
2282.6113 -2325.4224 2280.8403 -2323.8301 Y
2280.8403 -2335.6523 L
2250 -2335.6523 L
2250 -2348.2935 L
2750 -2348.2935 L
2750 -2335.6523 L
2734.4414 -2335.6523 L
f
u
1 Ap
0.575006 0.491157 1 0.379431 0.345098 0.333333 0.109804 Xa
2678.8213 -2341.2715 m
2678.8213 -2342.0903 2662.5078 -2342.7544 2642.3848 -2342.7544 c
2622.2607 -2342.7544 2605.9473 -2342.0903 2605.9473 -2341.2715 c
2605.9473 -2340.4521 2622.2607 -2339.7886 2642.3848 -2339.7886 c
2662.5078 -2339.7886 2678.8213 -2340.4521 2678.8213 -2341.2715 c
f
2378.5708 -2342.7192 m
2378.5708 -2343.519 2372.9429 -2344.1665 2366.0015 -2344.1665 c
2359.0591 -2344.1665 2353.4321 -2343.519 2353.4321 -2342.7192 c
2353.4321 -2341.9194 2359.0591 -2341.2715 2366.0015 -2341.2715 c
2372.9429 -2341.2715 2378.5708 -2341.9194 2378.5708 -2342.7192 c
f
2322.3618 -2347.1323 m
2322.3618 -2348.77 2312.1177 -2350.0981 2299.4824 -2350.0981 c
2286.8472 -2350.0981 2276.6035 -2348.77 2276.6035 -2347.1323 c
2276.6035 -2345.4946 2286.8472 -2344.1665 2299.4824 -2344.1665 c
2312.1177 -2344.1665 2322.3618 -2345.4946 2322.3618 -2347.1323 c
f
2564.9922 -2341.2715 m
2564.9922 -2342.0903 2558.29 -2342.7544 2550.0215 -2342.7544 c
2541.7529 -2342.7544 2535.0508 -2342.0903 2535.0508 -2341.2715 c
2535.0508 -2340.4521 2541.7529 -2339.7886 2550.0215 -2339.7886 c
2558.29 -2339.7886 2564.9922 -2340.4521 2564.9922 -2341.2715 c
f
2743.6445 -2343.248 m
2743.6445 -2344.3403 2738.2705 -2345.2261 2731.6406 -2345.2261 c
2725.0098 -2345.2261 2719.6357 -2344.3403 2719.6357 -2343.248 c
2719.6357 -2342.1567 2725.0098 -2341.2715 2731.6406 -2341.2715 c
2738.2705 -2341.2715 2743.6445 -2342.1567 2743.6445 -2343.248 c
f
U
0 Ap
0.480873 0.381384 1 0.14316 0.517647 0.494118 0.109804 Xa
2580.1025 -2348.4722 m
2561.7617 -2348.4722 2537.9512 -2347.3286 2518.0332 -2346.7188 C
2518.1621 -2346.3086 2518.6016 -2345.8706 2519.5156 -2345.4194 c
2523.7529 -2343.3311 2500.6621 -2349.0078 2503.8398 -2344.6162 c
2507.0176 -2340.2256 2496.0015 -2346.6519 2494.5186 -2343.3311 c
2493.0356 -2340.0112 2491.9766 -2347.8291 2487.9517 -2343.5454 c
2484.8916 -2340.2881 2485.0161 -2342.9131 2486.3687 -2345.9585 C
2468.3149 -2344.939 2448.1597 -2342.5103 2415.2896 -2346.3457 c
2414.5737 -2346.4302 2413.8433 -2346.5093 2413.1035 -2346.5864 C
2412.9131 -2345.9697 2412.9692 -2345.207 2413.3833 -2344.2588 c
2415.9253 -2338.439 2404.4858 -2348.0435 2405.1216 -2344.2588 c
2405.7568 -2340.4736 2401.52 -2348.2578 2397.9185 -2343.6709 c
2394.3174 -2339.0845 2398.3423 -2348.2578 2392.6226 -2344.8306 c
2387.8667 -2341.9814 2390.5811 -2344.9175 2394.0659 -2347.8882 C
2352.0796 -2349.6333 2293.8843 -2346.522 2278.8638 -2351.0425 C
2699.417 -2351.0425 L
2703.3877 -2349.8232 2688.167 -2349.4258 v
2659.0107 -2348.6646 2596.5264 -2348.4722 2580.1025 -2348.4722 c
f
U
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
